<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
       default-autowire="byName" default-lazy-init="false">
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.taobao.doa.ams.ops.dal.dao.domain"/>
        <property name="configLocation" value="/dal/conf/mybatis-config.xml"/>
        <property name="mapperLocations" value="/dal/mapper/*.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.taobao.doa.ams.ops.dal.dao.mapper"/>
    </bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${mysqlUrl}"/>
        <property name="username" value="${mysqlUserName}"/>
        <property name="password" value="${mysqlPassword}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="20"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--注解式事务配置驱动-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!--配置事务增强处理，指定事务处理策略，transaction-manager属性指定事务管理器。
   若事务管理器bean的id即为transactionManager，则
   transaction-manager的属性可以不指定-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有以find和get开头的方法都是只读的-->
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
        ##            <tx:method name="save*" rollback-for="java.lang.Exception"/>
        ##            <tx:method name="update*" rollback-for="java.lang.Exception"/>
            <!--其他方法使用默认事务策略-->
            <tx:method name="*" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- AOP配置-->
    <aop:config>
        <!--pointcut元素定义一个切入点，execution()是最常用的切点函数，
        其中的第一个星号用以匹配方法的返回类型，这里星号表明匹配所有返回类型。
    com.abc.service.*.*(..)表明匹配com.abc.service包下的所有类的所有方法，
    ..代表方法参数可以是任意的，包括0个。 -->
        <aop:pointcut id="myPointcut"
                      expression="execution(public * com.taobao.doa.ams.ops.biz.manager.web.impl.*.*(..))"/>
        <!--将定义好的事务处理策略应用到上述的切入点-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
    </aop:config>
</beans>